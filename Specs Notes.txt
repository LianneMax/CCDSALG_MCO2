Project #2 - Hash Table (Application of Hashing Functions and Collision Resolution Techniques)

Project Description:
- The program should store MANY strings as key values into a hash table data structure.
- The strings in the project will ONLY CONTAIN lowercase and uppercase letters.
- The strings should be CASE-SENSTIve.
- There are no digits, symbols, nor white spaces.
- The MAXIMUM STRING LENGTH is 15 characters (excluding the null byte).
- The strings doesn't need to be actual words (it can be aaa).

IMPORTANT THINGS TO DISCUSS WITH THE GROUP:
1. What hashing function will be used?
    - It's not limited to a simple modulus k % m
    - The objective is to find a hashing function with the smallest number of collisions.
2. What collision technique will you use?


PART #1 (HASH TABLE: DATA STRUCTURE):
- The HASH TABLE is used to store the key valuse (string).

1. Implement the hash table as a 1D array of strings
    - The hash table size CAN BE LESS than the array size. BUT NOT MORE.
    - MAKE SURE THAT THE HASH TABLE CAN STORE A MAXIMUM OF n = 2^14 = 16384 strings
    - The HASH TABLE SIZE should be set such that it is equal to the first prime number above 1.1 * n
        EXAMPLE:
        1. when n = 2^5 = 64
            - the first prime immediately above 1.1 * 64 is 71
            - Thus, the hash table to be used is 71
            - This means that you can only use 1D array indices 0 to 70 for storing the keys/strings.
            - Keys should not be stored beyond array index 70.
        2. when n = 2^14 = 16384
            - the first prime number immediately above 1.1 * 16384 is 18031
            - This means that you can only use 1D array indices 0 to 18030 for storing the keys/strings
            - Keys should not be stored beyond array index 18030.


PART #2: INPUT
1. The input data file is a txt file
2. The first line contains a number (n) that indicates the number of strings encoded in the input txt file.
3. Then, it is followed by n strings
4. There can be x numbers of white space and newline characters separating the txt file

    IMPORTANT NOTES:
    1. A string may appear more than once in the input txt file
    2. In the provided example MCO2 pdf file, "THE" appears twice in the file
    3. If there is a duplicate string stored, the duplicate should not be stored in the hash table
    4. THE HASH TABLE WILL ONLY CONTAIN UNIQUE STRINGS ONLY
    5. The first instance of "THE" will be stored in the hash table
    6. The second instance of "THE" will not be stored in the hash table, as it already exists in the entry


PART #3: OUTPUT
1. The output is a txt file
    - It contains the following:
        - The 1ST LINE indicates the NUMBER OF STRINGS IN THE INPUT TXT FILE
        - The 2ND LINE indicates the NUMBER OF STRINGS STORED IN THE HASH TABLE
        - The 3RD LINE indicates the NUMBER OF KEYS THAT WERE STORED IN THEIR HOME ADDRESSES
            - those that did not cause a collision
        - The 4TH LINE indicates the NUMBER OF KEYS THAT WERE NOT STORED IN THEIR HOME ADDRESSES
            - those that needed collison resolution to be applied on
        - The 5TH LINE indicates the AVERAGE NUMBER OF STRING COMPARISONS for the Search() operation
            - The average value is computed as: average = total number of string comparisons / number of strings that were stored in the table
                - THE AVERAGE VALUE SHOULD HAVE 6 DIGITS DECIMAL POINT

    - For the suceeding lines of output text, it should have FIVE columns of data
        - Column 1 is the INDICES OF THE HASH TABLE STARTING FROM 0 TO THE LAST INDEX
        - Column 2 is the STRING THAT IS STORED IN THE INDEX
        - Column 3 is the HOME ADDRESS OF THE STRING
        - Column 4 indicates YES OR NO
            - YES if the HOME ADDRESS IS THE SAME WITH THE INDEX WHERE IT WAS STORED
            - Otherwise, it should have NO (there was collision)
        - Column 5 indicates the NUMBER OF STRING COMPARISONS MADE WITH SEARCH()
            - A string that was stored in its home address should only have 1 comparison
            - Otherwise, the string will have more than 1 comparison
    
    - If there is no string in an index (the memory is unoccupied), columns 2 to 5 should display "---"

PART #4: TASKS

TASK 1: IMPLENENT THE FOLLOWING FUNCTIONS
    a. hash function
    b. collision resolution function
    c. Search() function

    1. Design and implement the hash function
        - The hash function should compute and return an index of the home address of the input string
        - IT SHOULD NOT STORE THE STRING IN THE HASH TABLE YET
        - Encode your function in hash.c

    2. Design and implement your collision resolution function
        - IT SHOULD NOT STORE THE STRING IN THE HASH TABLE
        - The function will return an index where the input string (synonym) should be stored
        - Encode your function in hash.c

    3. Implement your Search() function
        - It will search a key/string if it's in the hash table
        - It is dependent with the hash function and collision resolution functions
        - THE SEARCH() FUNCTION RETURNS THE INDEX WHERE THEY KEY WAS FOUND
        - OTHERWISE, IT SHOULD RETURN A -1
        - Encode your function in hash.c

    4. All funcions in hash.c should have proper documentation
        - THERE WILL BE DEDUCTIONS FOR ZERO TO LITTLE INLINE DOCUMENTATION
    
    5. Create a header file named hash.h
        - The header file should AT LEAST contain the following:
            - the #define for the MAXIMUM 1D ARRAY of string size
            - the prototypes for the hash function, collision resolution function, Search() function, and helper functions


TASK #2: IMPLEMENT A DRIVER PROGRAM TO TEST YOUR HASH FUNCTION, COLLISION RESOLUTION FUNCTION, AND SEARCH() FUNCTION

    1. The driver program should have a main() function, and helper functions that do the following
        a. Ask the user to enter the input text file.
            - If the file doesn't exist terminate the program and provide an appropriate error message.
        b. If the file exists, open and read the input text file
        c. Store the strings in the hash table (if there is no previous entry of the same string)
            â€“ this means that you have to call the hash function
            - if collision occurs, the collision resolution function.
        d. Ater processing all the input strings, ask the user to enter the name of the output text file.
        e. Write the required contents to the output text file.
        f. Close the input and output text files.


TASK #3: STRESS TEST THE SOLUTION

    1. Create AT LEAST 5 test case text files with different values of n
        - Starts with n = 2^5 = 64
        - The values of n should be expressed using 2 as exponent (ex. n = 2^8 = 256n = 2^8 = 256)
        - The fifth test should have n = 2^14 = 16384 random strings

    2. You can use random string generators on the internet

    3. It should produce the corresponding 5 output txt files


TASK #4: DOCUMENTATION
    1. Give a brief description of how you implemented the hash table.
    2. Describe in a concise manner your hash function.
    3. Describe in a concise manner your collision resolution technique.
    4. Disclose in detail what is not working in your submission.
    5. Tabulate the results obtained based on your 5 test case text files.